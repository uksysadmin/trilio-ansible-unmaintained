# Set of tasks that will check a Kubernetes cluster for
# - Valid Trilio for Kubernetes License
# - CSI Drivers Present
# - VolumeSnapshot CRDs
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Basic Kubernetes Checks
  block:
  - name: Check for kubectl
    stat:
      path: /usr/local/bin/kubectl
    register: kubectl
  tags: ['check', 'smoketest']

- name: Basic OpenShift Checks
  block:
  - name: Check for oc
    stat:
      path: /usr/local/bin/oc
    register: oc
  tags: ['check', 'smoketest']
  when: k8s_distro == "openshift"

- name: Trilio for Kubernetes Prerequisite Checks
  block:
  - name: Checking for Trilio License
    kubernetes.core.k8s_info:
      api_version: triliovault.trilio.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: License
      namespace: openshift-operators
      validate_certs: false
    register: license
    when: k8s_distro == 'openshift'

  - name: Checking for CSI Drivers
    kubernetes.core.k8s_info:
      api_version: storage.k8s.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: CSIDriver
      validate_certs: false
    register: csidrivers
    when: k8s_auth_type == 'password'

  - name: Checking for CSI Drivers (kubeconfig)
    kubernetes.core.k8s_info:
      api_version: storage.k8s.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: CSIDriver
      validate_certs: false
    register: csidrivers
    when: k8s_auth_type == 'kubeconfig'

  - name: Checking for VolumeSnapshot CRD
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: CustomResourceDefinition
      name: volumesnapshot.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshot
    when: k8s_auth_type == 'password'

  - name: Checking for VolumeSnapshot CRD (kubeconfig)
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      kind: CustomResourceDefinition
      name: volumesnapshot.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshot
    when: k8s_auth_type == 'kubeconfig'

  - name: Checking for VolumeSnapshotClass CRD
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: CustomResourceDefinition
      name: volumesnapshotclasses.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshotclasses
    when: k8s_auth_type == 'password'

  - name: Checking for VolumeSnapshotClass CRD (kubeconfig)
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      kind: CustomResourceDefinition
      name: volumesnapshotclasses.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshotclasses
    when: k8s_auth_type == 'kubeconfig'

  - name: Checking for VolumeSnapshotContent CRD
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: CustomResourceDefinition
      name: volumesnapshotclasses.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshotcontent
    when: k8s_auth_type == 'password'

  - name: Checking for VolumeSnapshotContent CRD (kubeconfig)
    kubernetes.core.k8s_info:
      api_version: apiextensions.k8s.io/v1
      kind: CustomResourceDefinition
      name: volumesnapshotclasses.snapshot.storage.k8s.io
      validate_certs: false
    register: volumesnapshotcontent
    when: k8s_auth_type == 'kubeconfig'

  rescue:
  - name: Warn user on TVK errors
    ansible.builtin.debug:
      msg: 'Unable to perform TVK checks'

  tags: ['check', 'smoketest']
