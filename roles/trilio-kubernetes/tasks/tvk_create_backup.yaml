# Set of tasks for creating a Trilio for Kubernetes Backup
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Create Backup
  block:
  - name: Configure the backup using {{ tvk_backupplan_name }}
    template:
      src: templates/backup.yaml.j2
      dest: /tmp/{{ tvk_backupplan_name }}-backup.yaml

  # Create the specified backup plan in specifed namespace
  - name: Execute the {{ tvk_backup_type }} backup {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }}
    kubernetes.core.k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: Backup
      state: present # State=present when you need to create new object
      namespace: "{{ tvk_namespace }}" # defining the namespace
      src: "/tmp/{{ tvk_backupplan_name }}-backup.yaml"
      validate_certs: false
    register: backup
    when: k8s_auth_type == "password"

  - name: Execute the {{ tvk_backup_type }} backup {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} (kubeconfig)
    kubernetes.core.k8s:
      kind: Backup
      state: present # State=present when you need to create new object
      namespace: "{{ tvk_namespace }}" # defining the namespace
      src: "/tmp/{{ tvk_backupplan_name }}-backup.yaml"
      validate_certs: false
    register: backup
    when: k8s_auth_type == "kubeconfig"

  # TODO: if not using kubeconfig auth, how to do kubectl?
  - name: Wait for {{ tvk_backup_type }} {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} to complete (kubeconfig)
    shell: >
      kubectl get backups/{{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} -n {{ tvk_namespace }}
    environment:
      KUBECONFIG: "{{ kubeconfig }}"
    register: backup_available
    retries: 10
    delay: 60
    until: backup_available.stdout.find("Available") != -1
    ignore_errors: true
    when: k8s_auth_type == "kubeconfig"

  - name: Wait for {{ tvk_backup_type }} {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} to complete (token)
    shell: |
      oc login "{{ k8s_auth_api }}" --token="{{ openshift_auth_results.openshift_auth.api_key }}" --insecure-skip-tls-verify=true
      oc get backups/{{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} -n {{ tvk_namespace }}
    register: backup_available
    retries: 10
    delay: 60
    until: backup_available.stdout.find("Available") != -1
    ignore_errors: true
    when:
    - k8s_auth_type == "password"
    - k8s_distro == "openshift"
  - debug: var=backup_available.stdout_lines
  tags: ['backup', 'backupplan', 'smoketest', 'autoprotect']

