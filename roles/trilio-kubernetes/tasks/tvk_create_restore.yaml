# Set of tasks for creating performing a Trilio for Kubernetes Restore
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Perform Restore
  block:
  - name: Create Restore Namespace
    ansible.builtin.include_tasks: tvk_create_ns.yaml
    tags: ['restore', 'smoketest']
    vars:
      tvk_namespace: "{{ tvk_restore_namespace }}"

  - name: Configure the restore from {{ tvk_backupplan_name }}
    template:
      src: templates/restore.yaml.j2
      dest: /tmp/{{ tvk_backupplan_name }}-restore.yaml

  # Execute the specified backup restore in specifed namespace
  - name: Execute the restore of {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }}
    kubernetes.core.k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: Restore
      state: present # State=present when you need to create new object
      namespace: "{{ tvk_restore_namespace }}" # defining the namespace
      src: "/tmp/{{ tvk_backupplan_name }}-restore.yaml"
      validate_certs: false
    register: restore

  # TODO: if not using kubeconfig auth, how to do kubectl?
  - name: Wait for restore of {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} to complete (kubeconfig)
    shell: >
      kubectl get restores/{{ tvk_backupplan_name }}-restore -n {{ tvk_restore_namespace }}
    environment:
      KUBECONFIG: "{{ kubeconfig }}"
    register: restore_available
    retries: 5
    delay: 60
    until: restore_available.stdout.find("Completed") != -1
    ignore_errors: true
    when:
    - k8s_auth_type == "kubeconfig"

  - name: Wait for restore of {{ tvk_backupplan_name }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} to complete (token)
    shell: |
      oc login "{{ k8s_auth_api }}" --token="{{ openshift_auth_results.openshift_auth.api_key }}" --insecure-skip-tls-verify=true 2>&/dev/null
      oc get restores/{{ tvk_backupplan_name }}-restore -n {{ tvk_restore_namespace }}
    register: restore_available
    retries: 5
    delay: 60
    until: restore_available.stdout.find("Completed") != -1
    ignore_errors: true
    when:
    - k8s_auth_type == "password"
    - k8s_distro == "openshift"
  - debug: var=restore_available.stdout_lines
  tags: ['restore', 'backupplan', 'smoketest', 'autoprotect']
